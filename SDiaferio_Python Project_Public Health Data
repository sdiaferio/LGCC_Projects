{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNZo8ySxDLcTT0qaYp+0tvi"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Analysis of diabetes data from public health data file: https://raw.githubusercontent.com/niteen11/DataAnalyticsAcademy/master/Python/dataset_diabetes/diabetic_data.csv"],"metadata":{"id":"Tataq1m7OCLS"}},{"cell_type":"code","execution_count":102,"metadata":{"id":"zKrGSzWpNHc-","executionInfo":{"status":"ok","timestamp":1743270791893,"user_tz":240,"elapsed":1330,"user":{"displayName":"Stephanie Diaferio","userId":"17643061181958466238"}}},"outputs":[],"source":["#Import Data , Pandas Library, and Seaborn\n","import pandas as pd\n","import seaborn as sns\n","%matplotlib inline\n","PBHealth = pd.read_csv(\"https://raw.githubusercontent.com/niteen11/DataAnalyticsAcademy/master/Python/dataset_diabetes/diabetic_data.csv\")\n"]},{"cell_type":"markdown","source":["Data review for cleansing"],"metadata":{"id":"D3AsSMz3O2ZU"}},{"cell_type":"code","source":["#Call dataframe to view data for cleaning and analysis\n","PBHealth"],"metadata":{"id":"zq4hcXyCP1EB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#View data types and descriptions\n","PBHealth.count()\n","#Data looks very complete"],"metadata":{"id":"8EkhYI78P9Py"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#View data types and column names\n","PBHealth.dtypes"],"metadata":{"id":"VfAAffHFQBna"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Check columns of interest for unique values to see if any may need cleaning, standardizing, or removal\n","AgeValues = PBHealth['age'].value_counts()\n","print(AgeValues)\n","WeightValues = PBHealth['weight'].value_counts()\n","print(WeightValues)\n","RaceValues = PBHealth['race'].value_counts()\n","print(RaceValues)\n","GenderValues = PBHealth['gender'].value_counts()\n","print(GenderValues)\n","readmittedValues = PBHealth['readmitted'].value_counts()\n","print(readmittedValues)"],"metadata":{"id":"JEWsDhIOSJFe"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Data Cleansing and Standardization"],"metadata":{"id":"Ukav4Rx3S1DD"}},{"cell_type":"code","source":["#Get column name list to assist with selecting only columns to be kept\n","column_list_values = PBHealth.columns\n","print(column_list_values)\n","\n","#Create new dataframe with columns to be used in analysis\n","PBHealth2=PBHealth[['encounter_id', 'patient_nbr', 'race', 'gender', 'age','admission_type_id', 'discharge_disposition_id',\n","                    'admission_source_id','time_in_hospital','num_lab_procedures', 'num_procedures',\n","                     'num_medications','number_outpatient', 'number_emergency', 'number_inpatient', 'diabetesMed', 'readmitted']]\n","\n","#Replace ? in Race column with \"Unkown\"\n","PBHealth2.loc[PBHealth2['race'] =='?','race']= 'Unknown'\n","\n","#Confirm counts of values in each column is the same after replacing value\n","#Ensure that only ? entires were replaced\n","RaceValues = PBHealth2['race'].value_counts()\n","print(RaceValues)\n"],"metadata":{"id":"hG62pY0oSyUj"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Data analysis - Average number of procedures (not lab tests) per encounter compared across race.\n","\n","After that analysis was completed there seemed to be small variability across race. I went back and added in average number of lab tests to the table to see if there was a greater difference in that category."],"metadata":{"id":"tFNKcZJ1fHrU"}},{"cell_type":"code","source":["#Count of unqiue encounters by race\n","EncounterCount=PBHealth2.groupby('race')['encounter_id'].nunique()\n","print(EncounterCount)\n","\n","#Sum of procedures (not lab tests) grouped by race\n","SumProcedures=PBHealth2.groupby('race')['num_procedures'].sum()\n","print(SumProcedures)\n","\n","#Average number of procedures (not lab tests) per encounter grouped by race\n","AvgProcedures=PBHealth2.groupby('race')['num_procedures'].mean()\n","print(AvgProcedures)\n","\n","#Average number of lab procedures by race\n","AvgLabProcedures=PBHealth2.groupby('race')['num_lab_procedures'].mean()\n","print(AvgLabProcedures)\n","\n","#Concatenate all calculations into one table and rename columns\n","DataAnalysis1=pd.concat([EncounterCount, SumProcedures, AvgProcedures, AvgLabProcedures], axis=1)\n","DataAnalysis1.columns = ['Unique Encounter Count', 'Total Procedures', 'Avg Procedures per Encounter', 'Avg Labs per Encounter']\n","\n","#Reset index so 'race' appears as a normal column\n","DataAnalysis1.reset_index(inplace=True)\n","\n","\n","#Sort by \"Avg Procedures per Encounter\" in descending order\n","DataAnalysis1 = DataAnalysis1.sort_values(by=[\"Avg Procedures per Encounter\", \"Avg Labs per Encounter\"], ascending=False)\n","\n","#Format columns to use thousands separators for integers and 2 decimal places for floats\n","DataAnalysis1['Unique Encounter Count'] = DataAnalysis1['Unique Encounter Count'].apply(lambda x: f\"{x:,}\")\n","DataAnalysis1['Total Procedures'] = DataAnalysis1['Total Procedures'].apply(lambda x: f\"{x:,}\")\n","DataAnalysis1['Avg Procedures per Encounter'] = DataAnalysis1['Avg Procedures per Encounter'].apply(lambda x: f\"{x:,.2f}\")\n","DataAnalysis1['Avg Labs per Encounter'] = DataAnalysis1['Avg Labs per Encounter'].apply(lambda x: f\"{x:,.2f}\")\n","\n","#Hide the index so the numbers don't show and Race stays a column\n","DataAnalysis1.style.hide()"],"metadata":{"id":"aC0_NlNOfHPx"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Next I wanted to do an analysis by Gender to see how the numbers trended by that grouping.\n"],"metadata":{"id":"r7O7-P1wy79Y"}},{"cell_type":"code","source":["#Count of unqiue encounters by gender\n","GenderEncounterCount=PBHealth2.groupby('gender')['encounter_id'].nunique()\n","print(GenderEncounterCount)\n","\n","#Sum of procedures (not lab tests) grouped by gender\n","GenderSumProcedures=PBHealth2.groupby('gender')['num_procedures'].sum()\n","print(GenderSumProcedures)\n","\n","#Average number of procedures (not lab tests) per encounter grouped by gender\n","GenderAvgProcedures=PBHealth2.groupby('gender')['num_procedures'].mean()\n","print(GenderAvgProcedures)\n","\n","#Average number of lab procedures by gender\n","GenderAvgLabProcedures=PBHealth2.groupby('gender')['num_lab_procedures'].mean()\n","print(GenderAvgLabProcedures)\n","\n","#Concatenate all calculations into one table and rename columns\n","DataAnalysis2=pd.concat([GenderEncounterCount, GenderSumProcedures, GenderAvgProcedures, GenderAvgLabProcedures], axis=1)\n","DataAnalysis2.columns = ['Unique Encounter Count', 'Total Procedures', 'Avg Procedures per Encounter', 'Avg Labs per Encounter']\n","# Reset index so 'gender' appears as a normal column\n","DataAnalysis2.reset_index(inplace=True)\n","\n","\n","# Sort by \"Avg Procedures per Encounter\" in descending order\n","DataAnalysis2 = DataAnalysis2.sort_values(by=[\"Avg Procedures per Encounter\", \"Avg Labs per Encounter\"], ascending=False)\n","\n","#format columns to use thousands separators for integers and 2 decimal places for floats\n","DataAnalysis2['Unique Encounter Count'] = DataAnalysis2['Unique Encounter Count'].apply(lambda x: f\"{x:,}\")\n","DataAnalysis2['Total Procedures'] = DataAnalysis2['Total Procedures'].apply(lambda x: f\"{x:,}\")\n","DataAnalysis2['Avg Procedures per Encounter'] = DataAnalysis2['Avg Procedures per Encounter'].apply(lambda x: f\"{x:,.2f}\")\n","DataAnalysis2['Avg Labs per Encounter'] = DataAnalysis2['Avg Labs per Encounter'].apply(lambda x: f\"{x:,.2f}\")\n","\n","#Hide the index so the numbers don't show and Race stays a column\n","DataAnalysis2.style.hide()"],"metadata":{"id":"qQa3U2iQy7rI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Remove Unknown/Invalid Gender row - the numbers are insufficient to compare to the other Genders\n","DataAnalysis2 = DataAnalysis2[DataAnalysis2['gender'] != 'Unknown/Invalid']\n","DataAnalysis2.style.hide()"],"metadata":{"id":"dq1hMaIo2UQ8"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["In order to show a full analysis in chart form by Race and Gender, create calculations to group by both values"],"metadata":{"id":"JNPaa6ye4WRp"}},{"cell_type":"code","source":["#Add Gender as grouping to Race Calculations but remove Unknown/Invalid Gender from data set\n","PBHealth3=PBHealth2[PBHealth2['gender'] != 'Unknown/Invalid']\n","\n","#Count of unqiue encounters by race and gender\n","\n","EncounterCount2=PBHealth3.groupby(['race','gender'])['encounter_id'].nunique()\n","print(EncounterCount2)\n","\n","#Sum of procedures (not lab tests) grouped by race\n","SumProcedures2=PBHealth3.groupby(['race','gender'])['num_procedures'].sum()\n","print(SumProcedures2)\n","\n","#Average number of procedures (not lab tests) per encounter grouped by race\n","AvgProcedures2=PBHealth3.groupby(['race','gender'])['num_procedures'].mean()\n","print(AvgProcedures2)\n","\n","#Average number of lab procedures by race\n","AvgLabProcedures2=PBHealth3.groupby(['race','gender'])['num_lab_procedures'].mean()\n","print(AvgLabProcedures2)\n","\n","#Concatenate all calculations into one table and rename columns\n","DataAnalysis3=pd.concat([EncounterCount2, SumProcedures2, AvgProcedures2, AvgLabProcedures2], axis=1)\n","DataAnalysis3.columns = ['Unique Encounter Count', 'Total Procedures', 'Avg Procedures per Encounter', 'Avg Labs per Encounter']\n","\n","#Format columns to use thousands separators for integers and 2 decimal places for floats\n","DataAnalysis3['Unique Encounter Count'] = DataAnalysis3['Unique Encounter Count'].apply(lambda x: f\"{x:,}\")\n","DataAnalysis3['Total Procedures'] = DataAnalysis3['Total Procedures'].apply(lambda x: f\"{x:,}\")\n","DataAnalysis3['Avg Procedures per Encounter'] = DataAnalysis3['Avg Procedures per Encounter'].apply(lambda x: f\"{x:,.2f}\")\n","DataAnalysis3['Avg Labs per Encounter'] = DataAnalysis3['Avg Labs per Encounter'].apply(lambda x: f\"{x:,.2f}\")\n","\n","DataAnalysis3"],"metadata":{"id":"juWpUy9N4dJx"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Bar Chart of average procedures per encounter by race"],"metadata":{"id":"mIEHHgwP3Ybp"}},{"cell_type":"code","source":["#Set color palette to flare\n","sns.color_palette(\"Spectral\", as_cmap=True)\n","\n","#Barplot of avg procedures per encounter broken out by gender\n","sns.barplot(DataAnalysis3, palette = \"Spectral\", x=\"Avg Procedures per Encounter\", y=\"race\", orient=\"y\",hue='gender')\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":466},"id":"UQWG1zvt3fzH","executionInfo":{"status":"ok","timestamp":1743269860512,"user_tz":240,"elapsed":251,"user":{"displayName":"Stephanie Diaferio","userId":"17643061181958466238"}},"outputId":"233f0295-8ef6-448f-edd5-6eeacbdf6f2b"},"execution_count":97,"outputs":[{"output_type":"stream","name":"stdout","text":["Axes(0.125,0.11;0.775x0.77)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["#Barplot of avg lab procedures per encounter broken out by gender\n","sns.barplot(DataAnalysis3, palette = \"Spectral\", x=\"Avg Labs per Encounter\", y=\"race\", orient=\"y\",hue='gender')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":466},"id":"2uv8qb94FRea","executionInfo":{"status":"ok","timestamp":1743273005732,"user_tz":240,"elapsed":264,"user":{"displayName":"Stephanie Diaferio","userId":"17643061181958466238"}},"outputId":"10253ba9-2d45-49aa-e66b-82b62e174fa1"},"execution_count":118,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: xlabel='Avg Labs per Encounter', ylabel='race'>"]},"metadata":{},"execution_count":118},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["For my analysis I started with the average number of procedures (non lab testing) per encounter by race to see if there was any obvious differences. There appears to be little variabilty between race and the number of procedures by encounter.\n","\n","I then reviewed the differences between average lab tests per encounter, while slightly more differences were there, it still appeared to be very low.\n","\n","The next step was to see if there was a higher variablity when gender was factored in. There was much greater difference in the average procedures per encounter by gender with Males having a higher average across all races. The numbers were more even when comparing number of lab tests per encounter, both between races and genders."],"metadata":{"id":"87Q1PKHUE6Rb"}}]}